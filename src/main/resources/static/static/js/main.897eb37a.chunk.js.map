{"version":3,"sources":["Components/app-header/start-button/StartButton.tsx","Components/app-header/admin-buttons/AdminButtons.tsx","app/hooks.ts","Slicer/ErrorSlice.ts","Slicer/AuthSlice.ts","Components/app-header/AppHeader.tsx","Interfaces/IQuestionCard.ts","services/apiService.ts","Slicer/QuizSlice.ts","Components/quizcard/choices/Choices.tsx","Components/quizcard/quizcard-header/QuizcardHeader.tsx","Components/quizcard/card-footer/CardFooter.tsx","Components/quizcard/Quizcard.tsx","Components/quiz/points-card/PointsCard.tsx","Components/quiz/Quiz.tsx","Slicer/NewCardSlice.ts","theme.ts","Components/quizcard/card-creation-dialog/custom-form-group/CustomFormGroup.tsx","Components/quizcard/card-creation-dialog/CardCreationDialog.tsx","Components/all-cards/AllCards.tsx","Components/login/Login.tsx","Components/signup/Signup.tsx","Components/highscore/Highscore.tsx","Components/main-view/protected-route/ProtectedRoute.tsx","Components/error/Error.tsx","Components/goodbye/Goodbye.tsx","Components/stack/face-down-card/FaceDownCard.tsx","Components/stack/Stack.tsx","Components/main-view/MainView.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["StartButton","props","history","useHistory","ButtonGroup","Button","endIcon","onClick","push","variant","size","sx","bgcolor","AdminButtons","useAppDispatch","useDispatch","useAppSelector","useSelector","ErrorSlice","createSlice","name","initialState","error","status","statusText","reducers","closeError","state","receiveError","action","payload","selectError","selectStatusText","actions","sendLoginData","credentials","axios","method","url","data","headers","then","response","catch","err","message","login","createAsyncThunk","thunkAPI","a","dispatch","LoginSlice","loggedIn","token","logout","localStorage","removeItem","extraReducers","builder","addCase","pending","fulfilled","setItem","selectLoggedIn","selectToken","AppHeader","cardMode","createCardStatus","useState","admin","setAdmin","window","innerWidth","scrollTrigger","setScrollTrigger","handleResize","useEffect","addEventListener","HideOnScroll","AppBar","Toolbar","justifyContent","Typography","IconButton","edge","mb","alignItems","children","trigger","useScrollTrigger","Slide","appear","direction","in","BASE_URL","getAllCards","getHeader","validateAnswer","card","handleError","getApiData","_","getState","validateQuizcard","answer","QuizSlice","allCards","answeredCards","pointsCounter","moveCardToAnseweredCardsStack","selectGetAllCards","quiz","selectGetAnsweredCards","selectPoints","Choices","choices","mode","selectAnswer","selected","choicesWithoutInput","map","choice","i","Grid","item","xs","sm","radios","ThemeProvider","theme","createTheme","palette","primary","main","FormControlLabel","control","Radio","label","value","checked","multipleChoiceInGrid","RadioGroup","onChange","createGrid","FormControl","width","component","QUIZ","childComponent","container","spacing","columns","QuizcardHeader","title","clickHandler","CardHeader","avatar","titleTypographyProps","fontSize","CardFooter","disableButton","onButtonClick","buttonText","footerText","CardActions","position","bottom","right","disabled","makeCardChangeBetweenPortraitAndLandscape","signup","height","borderRadius","styleCardContent","dialogStatus","styles","color","qStyles","Quizcard","setSelected","id","question","Card","Divider","CardContent","e","target","answerIndices","PointsCard","points","cardCount","align","Quiz","cardsToAnswer","filter","indexOf","nextCard","Math","floor","random","length","newCardSlice","changeQuestionText","secondary","background","default","paper","overrideFontColorOnFocus","CustomFormGroup","text","handleTextChange","handleButtonClick","textFieldName","textFieldLabel","FormGroup","TextField","CardCreationDialog","setQuestion","setChoices","choiceText","setChoiceText","setAnswerIndices","QUESTION","setDialogStatus","handleChange","ANSWER","SELECT","createCard","AllCards","cards","ALL","md","Login","username","password","setCredentials","onInput","to","my","required","type","sendLogin","Signup","field","headerName","Highscore","highscores","rows","highscore","date","col1","col2","score","col3","style","maxHeight","maxWidth","ProtectedRoute","route","path","Error","Dialog","open","PaperProps","textAlign","Goodbye","FaceDownCard","quizname","Stack","MainView","Container","pt","App","Fragment","CssBaseline","store","configureStore","reducer","quizReducer","newCard","newCardReducer","loginReducer","errorReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.897eb37a.chunk.js","sourcesContent":["import React from 'react'\nimport {useHistory} from \"react-router\";\n\n//component imports\nimport {ButtonGroup} from \"@mui/material\";\nimport Button from \"@mui/material/Button\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\n\n//interface imports\n\ntype Props = {};\n\nfunction StartButton(props: Props){\n    const history = useHistory();\n    return(\n        <ButtonGroup>\n            <Button endIcon={<PlayArrowIcon/>}\n                    onClick={() => history.push('/quiz')} variant=\"contained\" size=\"large\"\n                    sx={{bgcolor: \"primary.light\"}}>Start\n                Quiz</Button>\n        </ButtonGroup>\n    )\n}\n\nexport default StartButton;\n","import React from 'react'\n\nimport {useHistory} from \"react-router\";\n\n//component imports\nimport Button from \"@mui/material/Button\";\nimport {ButtonGroup} from \"@mui/material\";\n//interface imports\n\ntype Props = {};\n\nfunction AdminButtons(props: Props){\n    const history = useHistory();\n\n    return(\n        <ButtonGroup>\n            <Button onClick={() => history.push('/new')} variant=\"contained\" size=\"medium\"\n                    sx={{bgcolor: \"primary.light\"}}>Create\n                New Card</Button>\n            <Button onClick={() => history.push('/all')} variant=\"contained\" size=\"medium\"\n                    sx={{bgcolor: \"primary.light\"}}>Show\n                All Cards</Button>\n        </ButtonGroup>\n    )\n}\n\nexport default AdminButtons;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../app/store\";\n\nexport interface IError  {\n    status:number,\n    statusText:string,\n}\n\nconst initialState = {\n    error: false,\n    status: 200,\n    statusText: \"\",\n}\n\nexport const ErrorSlice = createSlice({\n    name:'error',\n    initialState,\n    reducers:{\n        closeError: (state) => {\n            state.error = false;\n            state.status = 200;\n            state.statusText = \"\";\n        },\n        receiveError:(state, action:PayloadAction<IError>) => {\n            state.error = true;\n            state.status = action.payload.status;\n            state.statusText = action.payload.statusText;\n        }\n    }\n})\n\nexport const selectError = (state: RootState) => state.error.error;\nexport const selectStatus = (state: RootState) => state.error.status;\nexport const selectStatusText = (state: RootState) => state.error.statusText;\nexport const {closeError, receiveError} = ErrorSlice.actions;\nexport default ErrorSlice.reducer;\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport {IUser} from \"../Interfaces/IUser\";\nimport {RootState} from \"../app/store\";\nimport {receiveError} from \"./ErrorSlice\";\n\nconst initialState = {\n    loggedIn: false,\n    token:\"\"\n}\n\nconst sendLoginData = (credentials: IUser) => {\n    return axios({\n        method: 'post',\n        url: `/auth/login`,\n        data: credentials,\n        headers: {\"Content-Type\": \"application/json\"}\n    }).then(response => {\n        return response\n    })\n        .catch(err => {\n            return {data: \"\",status: err.response.status, statusText:err.response.data.message}\n        })\n}\n\nexport const login = createAsyncThunk(\n    'login',\n    async (credentials:IUser, thunkAPI) =>  {\n        const {data, status, statusText} = await sendLoginData(credentials)\n       if(status !== 200) {\n           thunkAPI.dispatch(receiveError({status,statusText}))\n       }\n        return {data, status, statusText}\n    }\n)\ninterface IResponseData {\n    data: string;\n    status: number,\n    statusText:string\n}\n\nexport const LoginSlice = createSlice({\n    name:'login',\n    initialState,\n    reducers:{\n        logout:(state) => {\n            localStorage.removeItem(\"codificantesToken\");\n            state.loggedIn = false;\n        }\n    },\n    extraReducers:builder => {\n        builder\n            .addCase(login.pending, state => {\n            })\n            .addCase(login.fulfilled, (state, action: PayloadAction<IResponseData>) => {\n                if (action.payload.status !== 200){\n                    return;\n                }\n                state.loggedIn = true;\n                state.token = action.payload.data\n                localStorage.setItem('codificantesToken', action.payload.data);\n            })\n    }})\n\nexport const {logout} = LoginSlice.actions;\n\nexport const selectLoggedIn = (state: RootState) => state.login.loggedIn;\nexport const selectToken = (state: RootState) => state.login.token;\nexport default LoginSlice.reducer;\n","import React, {useEffect, useState} from 'react'\nimport 'bulma/css/bulma.css';\n\n\n//component imports\nimport {\n    AppBar,\n    IconButton,\n    Slide,\n    Toolbar,\n    Typography,\n    useScrollTrigger\n} from \"@mui/material\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport LogoutIcon from \"@mui/icons-material/Logout\";\nimport StartButton from \"./start-button/StartButton\";\nimport AdminButtons from \"./admin-buttons/AdminButtons\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\nimport {logout, selectLoggedIn} from \"../../Slicer/AuthSlice\";\nimport {useHistory} from \"react-router\";\n\n//interface imports\n\ntype Props = {\n    children?: React.ReactElement;\n};\n\nfunction AppHeader(props: Props) {\n    const history = useHistory();\n    const dispatch = useAppDispatch();\n    const loggedIn = useAppSelector(selectLoggedIn)\n    const [admin, setAdmin] = useState(false);\n    const [scrollTrigger, setScrollTrigger] = useState<boolean>(window.innerWidth < 900);\n    const handleLogout = () => {\n        dispatch(logout);\n        history.push('/logout')\n    }\n    const handleResize = () => {\n        if (window.innerWidth < 900 && !scrollTrigger) setScrollTrigger(true)\n        if (window.innerWidth >= 900 && scrollTrigger) setScrollTrigger(false)\n    }\n    useEffect(() => {\n        window.addEventListener(\"resize\", handleResize, false);\n    })\n    return (\n        <HideOnScroll {...props}>\n            <AppBar sx={{bgcolor: 'primary.light'}}>\n                <Toolbar sx={{justifyContent: \"space-between\"}}>\n                    <Typography>Codificantes</Typography>\n                    <IconButton onClick={() => setAdmin(!admin)} edge=\"end\">\n                        <EditIcon/>\n                    </IconButton>\n                </Toolbar>\n                <Toolbar sx={{mb: 1, alignItems: \"stretch\", justifyContent: \"space-between\"}}>\n                    {admin ? <AdminButtons/> : <StartButton/>}\n                    {loggedIn && <IconButton onClick={handleLogout} edge=\"end\">\n                        <LogoutIcon/>\n                    </IconButton>}\n                </Toolbar>\n            </AppBar>\n        </HideOnScroll>\n    )\n\n    function HideOnScroll(props: Props) {\n        const {children} = props;\n        const trigger = useScrollTrigger({});\n        return (\n            <Slide appear={false} direction=\"down\" in={!scrollTrigger ? true : !trigger}>\n                {children}\n            </Slide>\n        );\n    }\n}\n\nexport default AppHeader;\n","export interface IQuestionCard {\n    id:number,\n    question: string,\n    choices: string[],\n    answerIndices: number[],\n}\n\nexport enum cardMode {\n    RESULT = \"RESULT\",\n    QUIZ = \"QUIZ\",\n    ALL = \"ALL\",\n    NEW = 'NEW',\n}\n\ninterface IError {\n    status: number,\n    message: string,\n    error: boolean,\n}\n\nexport interface IQuizState extends IError {\n    allCards:IQuestionCard[],\n    answeredCards: IQuestionCard[],\n    pointsCounter: number,\n}\n\nexport interface IAuthState{\n    loggedIn: boolean,\n    token: string,\n}\nexport interface Istate {\n    quiz:IQuizState,\n    login: IAuthState,\n    error: IError,\n}\n\nexport enum createCardStatus {\n    QUESTION = \"QUESTION\",\n    ANSWER = \"ANSWER\",\n    SELECT = \"SELECT\"\n}\n","import axios, {AxiosResponse} from \"axios\";\n\n\nconst BASE_URL = \"/api/quiz\"\n\nexport const getAllCards = (token: string): Promise<AxiosResponse> => {\n    return axios({\n        method: 'get',\n        url: `${BASE_URL}`,\n        headers: {\"Authorization\":getHeader(token)}\n    })\n        .then(response => response)\n        .catch(err => err)\n}\n\nexport const createCard = (card: any, token:string ): Promise<AxiosResponse> => {\n    return axios({\n        method: 'post',\n        url: `${BASE_URL}/new`,\n        data: card,\n        headers: {\"Content-Type\": \"application/json\", \"Authorization\": getHeader(token)}\n    }).then(response => response)\n        .catch(err => err)\n\n}\nexport const validateAnswer = (card: any, token:string): Promise<AxiosResponse> => {\n    return axios({\n        method: 'post',\n        url: `${BASE_URL}`,\n        data: card,\n        headers: {\"Content-Type\": \"application/json\", \"Authorization\":getHeader(token)}\n    }).then(response => {\n        return response\n    })\n        .catch(err => err)\n\n}\n\nconst getHeader = (token:string) =>`Bearer ${token}`\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {getAllCards, validateAnswer} from \"../services/apiService\";\nimport { IQuestionCard, IQuizState} from \"../Interfaces/IQuestionCard\";\nimport {RootState} from \"../app/store\";\nimport { receiveError} from \"./ErrorSlice\";\n\nconst initialState: IQuizState = {\n    allCards: [],\n    answeredCards: [],\n    status: 200,\n    message: \"\",\n    error: false,\n    pointsCounter: 0,\n}\n\ninterface IResponseData {\n    data: IQuestionCard[],\n    status: number,\n    statusText: string\n}\n\nexport const handleError = (err: any) => {\n    return {data: [], status: err.response.status, statusText: err.response.data.message}\n}\nexport const getApiData = createAsyncThunk(\n    'quiz/fetchQuizcards'\n    , async (_, thunkAPI) =>  {\n        // @ts-ignore\n        const token = thunkAPI.getState().login.token;\n        const {data, status, statusText} = await getAllCards(token)\n        if(status !== 200){\n            thunkAPI.dispatch(receiveError(data))\n            return handleError(data)\n        }\n        return {data, status, statusText}\n    }\n    )\n\nexport const validateQuizcard = createAsyncThunk(\n    'quiz/vaildateAnswer',\n    async (answer: IQuestionCard, thunkAPI) => {\n        // @ts-ignore\n        const token = thunkAPI.getState().login.token\n        const {data, status} = await validateAnswer(answer, token);\n        if(status !== 200){\n            thunkAPI.dispatch(receiveError(data))\n            return handleError(data)\n        }\n        return {data}\n    }\n)\n\nexport const QuizSlice = createSlice({\n    name: 'todoList',\n    initialState,\n    reducers: {\n        closeError: (state) => {\n            state.error = false;\n            state.status = 200;\n            state.message = \"\";\n        },\n        moveCardToAnseweredCardsStack: (state, action: PayloadAction<IQuestionCard>) => {\n            state.answeredCards = [...state.answeredCards, action.payload];\n        },\n    },\n    extraReducers: (builder => {\n        builder\n            .addCase(getApiData.pending, state => {\n            })\n            .addCase(getApiData.fulfilled, (state, action: PayloadAction<IResponseData> ) => {\n                state.allCards = action.payload.data\n            })\n            .addCase(validateQuizcard.fulfilled, (state, action: PayloadAction<any>) => {\n                if (action.payload.data)state.pointsCounter += 1;\n            })\n    })\n})\n\nexport const selectGetAllCards = (state: RootState) => state.quiz.allCards;\nexport const selectGetAnsweredCards = (state: RootState) => state.quiz.answeredCards;\nexport const selectErrorStatus = (state: RootState) => state.quiz.status;\nexport const selectPoints = (state: RootState) => state.quiz.pointsCounter;\n\nexport const {closeError, moveCardToAnseweredCardsStack} = QuizSlice.actions;\nexport default QuizSlice.reducer;\n","import React from 'react'\n\n//component imports\nimport {\n    createTheme,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    Radio,\n    RadioGroup,\n    ThemeOptions, ThemeProvider,\n    Typography\n} from \"@mui/material\";\n\n//interface imports\nimport {cardMode} from \"../../../Interfaces/IQuestionCard\";\n\ntype Props = {\n    choices: string[],\n    mode: cardMode,\n    selectAnswer: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    selected: number[]\n};\n\nfunction Choices({choices, mode, selectAnswer, selected}: Props) {\n\n    const choicesWithoutInput = choices.map((choice, i) =>\n        <Grid item xs={2} sm={1} key={i}><Typography>{choice}</Typography></Grid>)\n\n    const radios = choices.map((choice, i) => (\n        <Grid item xs={2} sm={1} key={i}>\n            <ThemeProvider theme={overrideColorOnChecked()}>\n                <FormControlLabel control={<Radio />} label={choice} value={i} checked={selected[0] === i}/>\n            </ThemeProvider></Grid>));\n\n    const multipleChoiceInGrid =\n        <RadioGroup aria-label=\"Multiple Choice\" name=\"multiple-choice-answers\" onChange={selectAnswer}>\n            {createGrid(radios)}</RadioGroup>\n\n    return (\n        <FormControl sx={{width: \"100%\"}} component=\"fieldset\">\n            {mode === cardMode.QUIZ ? multipleChoiceInGrid : createGrid(choicesWithoutInput)}\n        </FormControl>\n    )\n\n    function createGrid(childComponent: JSX.Element | JSX.Element[]) {\n        return <Grid item container spacing={2} columns={{xs: 2}} justifyContent=\"space-between\">{childComponent}</Grid>\n    }\n\n    function overrideColorOnChecked(): ThemeOptions {\n        return createTheme({\n            palette: {\n                primary: {\n                    main: \"rgb(0,0,0,0.87)\"\n                }\n            }\n        })\n    }\n\n}\n\nexport default Choices;\n","import React from 'react'\n\n//component imports\nimport {CardHeader} from \"@mui/material\";\nimport HelpIcon from \"@mui/icons-material/Help\";\n\n//interface imports\n\ntype Props = {\n    title: string | undefined,\n    clickHandler?: () => void\n};\n\nfunction QuizcardHeader({title, clickHandler}: Props){\n    return(\n        <CardHeader\n            onClick={clickHandler}\n            component='h1'\n\n            sx={{bgcolor: 'background.paper', }}\n            avatar={<HelpIcon/>}\n            title={title && `${title}?`}\n            titleTypographyProps={{fontSize: 26}}\n        />\n    )\n}\n\nexport default QuizcardHeader;\n","import React from 'react'\nimport {Button, CardActions, Typography} from \"@mui/material\";\n\n//component imports\n\n//interface imports\n\ntype Props = {\n    disableButton:boolean,\n    onButtonClick:()=>void,\n    buttonText:string,\n    footerText?: string,\n};\n\nfunction CardFooter({disableButton, onButtonClick, buttonText, footerText}: Props){\n    return(\n        <CardActions sx={{position: \"absolute\", bottom: 1, right:15}}>\n            <Typography variant=\"button\">{footerText}</Typography>\n            <Button disabled={disableButton} variant=\"text\"\n                    onClick={onButtonClick} >{buttonText} </Button>\n        </CardActions>\n    )\n}\n\nexport default CardFooter;\n","import React, {useState} from 'react';\nimport {useAppDispatch} from \"../../app/hooks\";\nimport {moveCardToAnseweredCardsStack, validateQuizcard} from \"../../Slicer/QuizSlice\";\n\n//component imports\nimport {Card, CardContent, Divider,} from \"@mui/material\";\nimport Choices from \"./choices/Choices\";\nimport QuizcardHeader from \"./quizcard-header/QuizcardHeader\";\n\n//interface imports\nimport {cardMode, IQuestionCard} from \"../../Interfaces/IQuestionCard\";\nimport CardFooter from \"./card-footer/CardFooter\";\n\n\ntype Props = {\n    card: IQuestionCard,\n    mode: cardMode\n}\n\nfunction Quizcard({card, mode}: Props) {\n    const dispatch = useAppDispatch();\n    const [selected, setSelected] = useState<number[]>([]);\n    const onSelectAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSelected([+e.target.value])\n    };\n    const {id, question, choices} = card;\n    const submitAnswer = () => {\n        const answer: IQuestionCard = {id, question, choices, answerIndices: selected}\n        dispatch(validateQuizcard(answer));\n        setSelected([]);\n        dispatch(moveCardToAnseweredCardsStack(card));\n    };\n    return (\n        <Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <QuizcardHeader title={question}/>\n            <Divider/>\n            <CardContent sx={styleCardContent()}>\n                <Choices choices={choices} mode={mode} selectAnswer={onSelectAnswer} selected={selected}/>\n            </CardContent>\n            {mode === cardMode.QUIZ &&\n\n            <CardFooter disableButton={false} onButtonClick={submitAnswer} buttonText=\"submit answer\"/>}\n\n        </Card>\n    )\n}\n\nexport function makeCardChangeBetweenPortraitAndLandscape(signup: boolean = false) {\n    return {\n        height: {\n            xs: 500,\n            sm: signup ? 500 : 345\n        }, width: {\n            xs: 345, sm: 500\n        }, borderRadius: 10, position: \"relative\"\n    } as const;\n}\n\nexport function styleCardContent(dialogStatus = \"\") {\n    const styles = {\n        position: \"absolute\",\n        bottom: 50,\n        width: \"100%\",\n        bgcolor: 'primary.main',\n        color: 'primary.contrastText'\n    } as const;\n    const {bottom, position, ...qStyles} = {...styles} as const;\n    return dialogStatus === \"QUESTION\" ? qStyles : styles;\n}\n\nexport default Quizcard;\n","import React from 'react'\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../../quizcard/Quizcard\";\n\n//component imports\nimport {Card, CardContent, Divider, Typography} from \"@mui/material\";\nimport QuizcardHeader from \"../../quizcard/quizcard-header/QuizcardHeader\";\n\n\n//interface imports\n\ntype Props = {\n    points: number,\n    cardCount: number,\n};\n\nfunction PointsCard({points, cardCount}: Props){\n    return(\n        <Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <QuizcardHeader title=\"username\"/>\n            <Divider />\n            <CardContent sx={styleCardContent()}>\n                <Typography variant=\"h5\" component=\"h5\" align=\"center\" >You answered {points} of {cardCount} cards correct!</Typography>\n            </CardContent>\n\n        </Card>\n    )\n}\n\nexport default PointsCard;\n","import React from 'react'\nimport {selectGetAllCards, selectGetAnsweredCards, selectPoints} from '../../Slicer/QuizSlice';\nimport {useAppSelector} from \"../../app/hooks\";\n\n//component imports\nimport { Grid} from \"@mui/material\";\nimport Quizcard from \"../quizcard/Quizcard\";\nimport PointsCard from \"./points-card/PointsCard\";\n\n\n//interface imports\nimport {cardMode, IQuestionCard} from \"../../Interfaces/IQuestionCard\";\n\ntype Props = {};\n\n\nfunction Quiz(props: Props) {\n    const allCards = useAppSelector(selectGetAllCards);\n    const answeredCards = useAppSelector(selectGetAnsweredCards);\n    const points = useAppSelector(selectPoints);\n\n    const cardsToAnswer = allCards.filter(card => answeredCards.indexOf(card) === -1);\n    const nextCard: IQuestionCard = cardsToAnswer[Math.floor(Math.random() * cardsToAnswer.length)]\n    return (\n        <Grid item>\n            {nextCard ? <Quizcard card={nextCard} mode={cardMode.QUIZ}/> :\n                <PointsCard points={points} cardCount={allCards.length}/>}\n        </Grid>\n    )\n}\n\nexport default Quiz;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../app/store\";\n\nconst initialState = {\n    question: \"\"\n}\n\nexport const newCardSlice = createSlice({\n    name: \"newCard\",\n    initialState,\n    reducers:{\n        changeQuestionText:(state, action:PayloadAction<string>) => {\n            state.question = action.payload;\n        }\n    }\n})\n\nexport const selectQuestionText = (state: RootState) => state.newCard.question;\nexport const {changeQuestionText} = newCardSlice.actions;\nexport default newCardSlice.reducer;\n","import {createTheme, ThemeOptions} from \"@mui/material\";\n\n const theme:ThemeOptions = createTheme({\n         palette: {\n             primary: {\n                 main: '#fca311',\n             },\n             secondary: {\n                 main: '#000000',\n             },\n             background: {\n                 default: '#14213d',\n                 paper: '#e5e5e5',\n             },\n         },\n     //     primary: {\n     //         main: '#546A7B',\n     //     },\n     //     secondary: {\n     //         main: '#c6c5b9',\n     //     },\n     //     background: {\n     //         default: '#393d3f',\n     //         paper: '#62929e',\n     //     },\n     // },\n     // palette: {\n     //     primary: {\n     //         main: '#ffb300',\n     //\n     //     },\n     //     secondary: {\n     //         main: '#5c6bc0',\n     //     },\n     //     background: {\n     //         default: '#fff9c4',\n     //         paper: '#f3e5f5',\n     //     },\n     //     success: {\n     //         main: '#16e21d',\n     //     },\n     // },\n});\nexport const overrideFontColorOnFocus = ():ThemeOptions => {\n    return createTheme({\n        palette:{\n            primary:{\n                main:\"#000\"\n            }\n        }\n    })\n}\nexport const overrideBackgroundForError = ():ThemeOptions => {\n    return createTheme({\n        palette:{\n            primary:{\n                main:\"#ff0000\"\n            }\n        }\n    })\n}\n\n\nexport default theme\n","import React, {ChangeEvent} from 'react'\n\n//component imports\nimport {Button,  FormGroup, ThemeProvider} from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\nimport {overrideFontColorOnFocus} from \"../../../../theme\";\n\n//interface imports\n\ntype Props = {\n    text: string | undefined,\n    handleTextChange: (e: ChangeEvent<HTMLInputElement>) => void,\n    disableButton: boolean,\n    handleButtonClick: () => void,\n    textFieldName:string,\n    textFieldLabel:string\n}\n;\n\nfunction CustomFormGroup({text, handleTextChange, disableButton, handleButtonClick, textFieldName, textFieldLabel}: Props){\n    return(\n        <FormGroup>\n            <ThemeProvider theme={overrideFontColorOnFocus()}>\n                <TextField value={text} name={textFieldName} label={textFieldLabel}\n                           onChange={handleTextChange} variant=\"filled\" />\n            </ThemeProvider>\n            <Button disabled={disableButton} onClick={handleButtonClick} variant=\"contained\">Ok</Button>\n        </FormGroup>\n    )\n\n}\n\nexport default CustomFormGroup;\n","import React, {useState} from 'react'\nimport {getApiData} from \"../../../Slicer/QuizSlice\";\nimport {useAppDispatch, useAppSelector} from \"../../../app/hooks\";\nimport {changeQuestionText} from \"../../../Slicer/NewCardSlice\";\n\n//component imports\nimport Choices from \"../choices/Choices\";\nimport {createCard} from \"../../../services/apiService\";\nimport {\n    Card,\n    CardContent,\n    Divider,\n} from \"@mui/material\";\nimport QuizcardHeader from \"../quizcard-header/QuizcardHeader\";\nimport CardFooter from \"../card-footer/CardFooter\";\nimport CustomFormGroup from \"./custom-form-group/CustomFormGroup\";\n\n\n//interface imports\nimport {cardMode, createCardStatus} from \"../../../Interfaces/IQuestionCard\";\n\n//styles\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../Quizcard\";\nimport { selectToken } from '../../../Slicer/AuthSlice';\n\ntype Props = {};\n\nfunction CardCreationDialog(props: Props) {\n    const dispatch = useAppDispatch();\n    const [question, setQuestion] = useState<string>(\"\");\n    const [choices, setChoices] = useState<string[]>([]);\n    const [choiceText, setChoiceText] = useState<string>(\"\");\n    const [answerIndices, setAnswerIndices] = useState<number[]>([]);\n    const [dialogStatus, setDialogStatus] = useState<createCardStatus>(createCardStatus.QUESTION);\n    const token = useAppSelector(selectToken);\n    const handleChange = ({target}: React.ChangeEvent<HTMLInputElement>) => {\n        target.name === \"question\" && setQuestion(target.value);\n        target.name === \"choiceText\" && setChoiceText(target.value)\n    }\n    const advanceStatus = () => {\n        setDialogStatus(dialogStatus === createCardStatus.QUESTION ? createCardStatus.ANSWER : createCardStatus.SELECT);\n    }\n    // const revertStatus = () => {\n    //     setDialogStatus(dialogStatus === createCardStatus.SELECT ? createCardStatus.ANSWER : createCardStatus.QUESTION);\n    // }\n    const saveChoice = () => {\n        setChoices([...choices, choiceText]);\n        setChoiceText(\"\");\n    }\n    const saveCard = () => {\n        createCard({question: question, choices, answerIndices}, token)\n            .then(() => {\n                dispatch(getApiData());\n                resetStates();\n            });\n    }\n    return (<Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <QuizcardHeader title={question} clickHandler={() => setDialogStatus(createCardStatus.QUESTION)}/>\n            <Divider/>\n            <CardContent sx={styleCardContent(dialogStatus)}>\n                {dialogStatus === createCardStatus.QUESTION &&\n                <CustomFormGroup text={question} handleTextChange={handleChange} disableButton={!question.length}\n                                 handleButtonClick={advanceStatus} textFieldName=\"question\"\n                                 textFieldLabel=\"write your question here\"/>}\n                {dialogStatus === createCardStatus.ANSWER && choices.length < 4 &&\n                <CustomFormGroup text={choiceText} handleTextChange={handleChange} disableButton={!choiceText.length}\n                                 handleButtonClick={saveChoice} textFieldName=\"choiceText\"\n                                 textFieldLabel=\"write possible answer here\"/>\n                }\n                <Choices choices={choices} mode={cardMode.QUIZ}\n                         selectAnswer={(e) => setAnswerIndices([+e.target.value])} selected={answerIndices}/>\n\n            </CardContent>\n            <CardFooter disableButton={choices.length < 2 || !answerIndices.length || !question} onButtonClick={saveCard} buttonText=\"save card\" />\n\n        </Card>\n    )\n\n    function resetStates() {\n        dispatch(changeQuestionText(\"\"))\n        setQuestion(\"\");\n        setChoices([]);\n        setChoiceText(\"\");\n        setAnswerIndices([]);\n        setDialogStatus(createCardStatus.QUESTION);\n    }\n}\n\nexport default CardCreationDialog;\n","import React from 'react'\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectGetAllCards} from \"../../Slicer/QuizSlice\";\n\n//component imports\nimport Quizcard from \"../quizcard/Quizcard\";\n\n//interface imports\nimport {cardMode} from \"../../Interfaces/IQuestionCard\";\nimport {Grid} from \"@mui/material\";\n\ntype Props = {};\n\nfunction AllCards(props: Props) {\n    const allCards = useAppSelector(selectGetAllCards);\n    const cards = allCards.map(card => <Grid item key={card.id}><Quizcard card={card} mode={cardMode.ALL}/></Grid>)\n    return (\n        <Grid container spacing={2} sx={{justifyContent: {md: \"space-between\", xs: \"space-around\"}}}>\n            {cards}\n        </Grid>\n\n    )\n}\n\nexport default AllCards;\n","import React, {ChangeEvent, useState} from 'react'\nimport {Redirect, useHistory} from \"react-router\";\nimport {overrideFontColorOnFocus} from \"../../theme\";\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../quizcard/Quizcard\";\nimport {login as sendLogin, selectLoggedIn} from '../../Slicer/AuthSlice'\n\n//component imports\nimport {\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    FormGroup,\n    TextField,\n    ThemeProvider,\n} from \"@mui/material\";\nimport CardFooter from \"../quizcard/card-footer/CardFooter\";\nimport {IUser} from \"../../Interfaces/IUser\";\nimport {useAppDispatch, useAppSelector} from \"../../app/hooks\";\n\n//interface imports\n\ntype Props = {};\n\nfunction Login(props: Props) {\n    const loggedIn = useAppSelector(selectLoggedIn);\n    const dispatch = useAppDispatch();\n    const history = useHistory();\n    const [credentials, setCredentials] = useState<IUser> ({username:\"\", password:\"\"});\n    const login = () => {\n        credentials && dispatch(sendLogin(credentials));\n    }\n    const onInput = (e: ChangeEvent<HTMLInputElement>) => {\n        setCredentials({...credentials, [e.target.name]:e.target.value })\n    }\n\n    return (\n        loggedIn ? <Redirect to=\"/quiz\"/> :\n        <Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <CardHeader title=\"Login to your account\" align=\"center\"/>\n            <Divider/>\n            <CardContent sx={styleCardContent(\"QUESTION\")}>\n\n                <FormGroup >\n                    <ThemeProvider theme={overrideFontColorOnFocus()}>\n                        <TextField onChange={onInput} sx={{my: 1}} required name=\"username\" label=\"username\" type=\"username\"/>\n                        <TextField onChange={onInput} sx={{my: 1}} required name=\"password\"  type=\"password\"/>\n                        <Button type=\"submit\" onClick={login}>Login</Button>\n                    </ThemeProvider>\n                </FormGroup>\n            </CardContent>\n            <CardFooter disableButton={false} footerText=\"The first time here? \" buttonText=\"sign up\"\n                        onButtonClick={() => history.push('/signup')}/>\n        </Card>\n    )\n}\n\nexport default Login;\n","import React from 'react'\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../quizcard/Quizcard\";\nimport {overrideFontColorOnFocus} from \"../../theme\";\nimport {selectLoggedIn} from \"../../Slicer/AuthSlice\";\nimport {useAppSelector} from \"../../app/hooks\";\n\n//component imports\nimport {\n    Button,\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    FormGroup,\n    TextField,\n    ThemeProvider,\n} from \"@mui/material\";\nimport {Redirect} from \"react-router\";\n\n//interface imports\n\ntype Props = {};\n\nfunction Signup(props: Props) {\n    const loggedIn = useAppSelector(selectLoggedIn);\n    return (\n        loggedIn ? <Redirect to=\"/quiz\"/> :\n        <Card sx={makeCardChangeBetweenPortraitAndLandscape(true)}>\n            <CardHeader title=\"Sing up for free to play Codificantes\" align=\"center\"/>\n            <Divider/>\n            <CardContent sx={styleCardContent(\"QUESTION\")}>\n                <FormGroup>\n                    <ThemeProvider theme={overrideFontColorOnFocus()}>\n                        <TextField sx={{my: 1}} required label=\"username\" type=\"email\"/>\n                        <TextField sx={{my: 1}} required label=\"email address\" type=\"email\"/>\n                        <TextField sx={{my: 1}} required label=\"Password\" type=\"password\"/>\n                        <TextField sx={{my: 1}} required label=\"confirm password\" type=\"password\"/>\n                        <Button type=\"submit\">Sign up</Button>\n                    </ThemeProvider>\n                </FormGroup>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Signup;\n","import React from 'react'\n\n//component imports\nimport {DataGrid, GridRowsProp, GridColDef} from \"@mui/x-data-grid\";\n\n//interface imports\nimport {IHighscore} from \"../../Interfaces/IUser\";\n\ntype Props = {\n    highscores: IHighscore[]\n};\n\n\nconst columns: GridColDef[] = [\n    {field: 'col1', headerName: 'Username', width: 300},\n    {field: 'col2', headerName: 'Points', width: 200},\n    {field: 'col3', headerName: 'Date', width: 200},\n];\n\nfunction Highscore({highscores}: Props) {\n    const rows: GridRowsProp = !highscores ? [] : highscores.map(highscore => {\n        const {id, username, date, score} = highscore\n        return {id: id, col1: username, col2: score, col3: date}\n    });\n    return (\n        <div style={{height: 500, maxHeight: \"100%\", width: 700, maxWidth: \"100%\"}}>\n            <DataGrid rows={rows} columns={columns}/>\n        </div>\n    )\n}\n\nexport default Highscore;\n","import React from 'react'\nimport {useAppSelector} from \"../../../app/hooks\";\nimport {selectLoggedIn} from \"../../../Slicer/AuthSlice\";\n\n//component imports\nimport {Redirect, Route} from \"react-router\";\nimport Login from \"../../login/Login\";\n\n//interface imports\n\ntype Props = {\n    route:string,\n    component?:any\n};\nfunction ProtectedRoute({route, component}: Props){\n    const loggedIn = useAppSelector(selectLoggedIn);\n\n    return(\n        // loggedIn ? <Route exact={exact} path={route} component={component} /> : <Redirect  to=\"/login\" />\n    <Route  path={route} component={loggedIn ? component : Login} />\n)\n}\n\nexport default ProtectedRoute;\n","import React from 'react'\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../quizcard/Quizcard\";\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {closeError, selectError,  selectStatusText} from \"../../Slicer/ErrorSlice\";\n\n//component imports\nimport {Card, CardContent, CardHeader, Dialog, Divider, ThemeProvider, Typography} from \"@mui/material\";\nimport CardFooter from \"../quizcard/card-footer/CardFooter\";\nimport {overrideBackgroundForError} from \"../../theme\";\n\n//interface imports\n\ntype Props = {\n};\n\nfunction Error(props: Props) {\n     const error = useAppSelector(selectError)\n     const statusText = useAppSelector(selectStatusText)\n    const dispatch = useAppDispatch();\n    const clickHandler = () => {\n        dispatch(closeError());\n    }\n    return (\n        <Dialog open={error} sx={{bgcolor: \"transparent\"}} PaperProps={{sx:{bgcolor:\"transparent\"}}}>\n        <ThemeProvider theme={overrideBackgroundForError()}>\n            <Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n                <CardHeader title=\"Error!!1!\" align=\"center\"/>\n                <Divider/>\n                <CardContent sx={{...styleCardContent(), bottom:120, textAlign:\"center\"}}>\n                    <Typography variant=\"h2\">{statusText}</Typography>\n                </CardContent>\n                <CardFooter disableButton={false} footerText=\"Something went wrong \" buttonText=\"OK\"\n                            onButtonClick={clickHandler}/>\n            </Card>\n        </ThemeProvider>\n        </Dialog>\n    )\n}\n\nexport default Error;\n","import React from 'react'\nimport {\n    Card,\n    CardContent,\n    CardHeader,\n    Divider,\n    Typography\n} from \"@mui/material\";\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../quizcard/Quizcard\";\n\n//component imports\n\n//interface imports\n\ntype Props = {};\n\nfunction Goodbye(props: Props) {\n    return (\n        <Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <CardHeader title=\"Sing up for free to play Codificantes\" align=\"center\"/>\n            <Divider/>\n            <CardContent sx={{...styleCardContent(), bottom: 120, textAlign: 'center'}}>\n                <Typography variant=\"h2\">Goodbye!</Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default Goodbye;\n","import React from 'react'\n\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../../quizcard/Quizcard\";\n\n//component imports\nimport {\n    Card,\n    CardContent,\n    Typography\n} from \"@mui/material\";\n//interface imports\n\ntype Props = {\n    quizname?:string\n};\n\nfunction FaceDownCard({quizname}: Props){\n    return(\n        <Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <CardContent sx={{...styleCardContent(), bottom:150, textAlign:\"center\"}}>\n<Typography variant=\"h4\">{quizname}</Typography>\n\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default FaceDownCard;\n","import React from 'react'\nimport FaceDownCard from \"./face-down-card/FaceDownCard\";\n\n//component imports\n\n//interface imports\n\ntype Props = {\n    cards?:number\n    quizname?:string\n};\n\nfunction Stack({cards, quizname}: Props){\n\n\n    return(\n       <FaceDownCard quizname={quizname}/>\n    )\n}\n\nexport default Stack;\n","import React from 'react'\n\n\n//component imports\nimport {Container, Grid} from \"@mui/material\";\nimport Quiz from \"../quiz/Quiz\";\nimport CardCreationDialog from \"../quizcard/card-creation-dialog/CardCreationDialog\";\nimport AllCards from \"../all-cards/AllCards\";\nimport Login from \"../login/Login\";\nimport Signup from \"../signup/Signup\";\nimport Highscore from \"../highscore/Highscore\";\nimport ProtectedRoute from \"./protected-route/ProtectedRoute\";\nimport Error from '../error/Error'\nimport Goodbye from \"../goodbye/Goodbye\";\nimport {Route} from \"react-router\";\nimport Stack from \"../stack/Stack\";\n\n//interface imports\n\ntype Props = {};\n\nfunction MainView(props: Props){\n    return(\n        <Container sx={{pt: 15}} maxWidth={false}>\n            <Grid container justifyContent=\"center\" alignItems=\"center\">\n                <Route path={\"/logout\"} component={Goodbye} />\n                <Route path=\"/login\" component={Login}/>\n                <Route path={\"/signup\"} component={Signup}/>\n                <ProtectedRoute route={\"/quiz\"} component={Quiz} />\n                <ProtectedRoute route={\"/new\"} component={CardCreationDialog}/>\n                <ProtectedRoute route={\"/all\"} component={AllCards}/>\n                <ProtectedRoute route={\"/highscore\"} component={Highscore}/>\n                <ProtectedRoute route={\"/\"} component={Stack} />\n                <Error/>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default MainView;\n","import React from 'react';\nimport './App.css';\n\n\n//components\nimport AppHeader from \"./Components/app-header/AppHeader\";\nimport {useAppDispatch, useAppSelector} from \"./app/hooks\";\nimport {getApiData} from \"./Slicer/QuizSlice\";\nimport {CssBaseline, Toolbar} from \"@mui/material\";\nimport MainView from \"./Components/main-view/MainView\";\nimport {selectToken} from \"./Slicer/AuthSlice\";\n\nfunction App() {\n    const token = useAppSelector(selectToken);\n    const dispatch = useAppDispatch();\n    token.length && dispatch(getApiData());\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n            <AppHeader />\n            <Toolbar/>\n            <MainView />\n\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport quizReducer from '../Slicer/QuizSlice';\nimport newCardReducer from '../Slicer/NewCardSlice'\nimport loginReducer from '../Slicer/AuthSlice'\nimport errorReducer from '../Slicer/ErrorSlice'\n\nexport const store = configureStore({\n  reducer: {\n    quiz: quizReducer,\n    newCard: newCardReducer,\n    login: loginReducer,\n    error: errorReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport { ThemeProvider} from \"@mui/material\";\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <ThemeProvider theme={theme}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n          </ThemeProvider>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}