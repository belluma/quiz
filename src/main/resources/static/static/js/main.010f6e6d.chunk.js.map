{"version":3,"sources":["Components/start-view/StartView.tsx","Interfaces/IQuestionCard.ts","services/apiService.ts","Slicer/QuizSlice.tsx","app/hooks.ts","Components/choices/Choices.tsx","Components/card/Card.tsx","Components/quiz/Quiz.tsx","Components/card-creation-dialog/CardCreationDialog.tsx","Components/all-cards/AllCards.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["StartView","cardMode","props","history","useHistory","Grid","container","justifyContent","alignItems","item","Box","Button","onClick","push","variant","BASE_URL","getApiData","createAsyncThunk","a","console","log","axios","get","then","result","catch","err","data","status","statusText","QuizSlice","createSlice","name","initialState","allCards","answeredCards","message","error","reducers","closeError","state","answerCard","action","payload","extraReducers","builder","addCase","pending","fulfilled","handleErrors","selectGetAllCards","quiz","selectGetAnsweredCards","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","Choices","choices","mode","selectAnswer","choicesNoInteraction","map","choice","i","radios","FormControlLabel","control","Radio","label","value","multipleChoice","RadioGroup","onChange","FormControl","component","ALL","Quizcard","card","dispatch","useState","selected","setSelected","question","answerIndices","Card","sx","maxWidth","CardHeader","IconButton","title","CardContent","e","target","QUIZ","CardActions","length","every","index","indexOf","Quiz","cardsToAnswer","filter","nextCard","Math","floor","random","CardCreationDialog","setQuestion","setChoices","choiceText","setChoiceText","answerIndex","setAnswerIndex","setAnswerIndices","handleChange","Typography","TextField","method","url","headers","response","AllCards","cards","App","path","store","configureStore","reducer","quizReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.010f6e6d.chunk.js","sourcesContent":["import React from 'react'\n\n\n//component imports\nimport {Grid} from \"@mui/material\";\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport {useHistory} from \"react-router\";\n//interface imports\n\ntype Props = {};\n\nfunction StartView(props: Props){\n    const history = useHistory();\n    return(\n      <Grid container justifyContent=\"center\" alignItems=\"center\">\n          <Grid item>\n              <Box>\n              <Button onClick={() => history.push('/quiz')} variant=\"outlined\">Start Quiz</Button>\n              <Button onClick={() => history.push('/new')} variant=\"outlined\">Create New Card</Button>\n              <Button onClick={() => history.push('/all')} variant=\"outlined\">Show All Cards</Button>\n              </Box>\n          </Grid>\n      </Grid>\n\n    )\n}\n\nexport default StartView;\n","export interface IQuestionCard {\n    question: string,\n    choices: string[],\n    answerIndices: number[],\n}\n\nexport enum cardMode {\n    RESULT = \"RESULT\",\n    QUIZ = \"QUIZ\",\n    ALL = \"ALL\",\n}\n\nexport interface IError {\n    status: number,\n    message: string,\n    error: boolean,\n}\n\nexport interface IQuizState extends IError {\n    allCards:IQuestionCard[],\n    answeredCards: IQuestionCard[],\n}\n","import axios, {AxiosResponse} from \"axios\";\n\nconst BASE_URL = \"/api/quiz\"\n\nexport const getAllCards = ():Promise<AxiosResponse> => {\n    console.log(BASE_URL);\n    return axios.get(BASE_URL)\n        .then(result => result)\n        .catch(err => err)\n\n}\nexport const createCard = (card:any):Promise<AxiosResponse> =>{\n    return axios({\n        method:'post',\n        url:`${BASE_URL}/new`,\n        data: card,\n        headers:{\"Content-Type\": \"application/json\"}\n    }).then(response => response)\n        .catch(err => err)\n\n\n}\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {getAllCards} from \"../services/apiService\";\nimport {IError, IQuestionCard, IQuizState} from \"../Interfaces/IQuestionCard\";\nimport {RootState} from \"../app/store\";\n\n\nconst initialState: IQuizState = {\n    allCards: [],\n    answeredCards:[],\n    status: 200,\n    message: \"\",\n    error: false,\n    }\n\nexport const getApiData = createAsyncThunk(\n    'todoList/fetchTodos'\n    , async () => {\n        const {data, status, statusText} = await (getAllCards());\n        return {data, status, statusText}\n    }\n)\n\ninterface IResponseData {\n    data:IQuestionCard[],\n    status:number,\n    statusText:string\n}\n\nconst handleErrors = (state:IQuizState, action: PayloadAction<IResponseData>): boolean => {\n    if(action.payload.status !== 200){\n        state.status = action.payload.status;\n        state.message = action.payload.statusText;\n        state.error = true;\n        if(action.payload.status === 204) state.allCards = state.answeredCards = [];\n        return true\n    }\n    return false\n}\nexport const QuizSlice = createSlice({\n    name: 'todoList',\n    initialState,\n    reducers: {\n        closeError: (state) =>{\n            state.error = false;\n            state.status = 200;\n            state.message = \"\";\n        },\n        answerCard: (state, action:PayloadAction<IQuestionCard>) => {\n            state.answeredCards = [...state.answeredCards, action.payload];\n        }\n    },\n    extraReducers: (builder => {\n        builder\n            .addCase(getApiData.pending, state => {\n            })\n            .addCase(getApiData.fulfilled, (state, action: PayloadAction<IResponseData>) => {\n                if (handleErrors(state, action)) return\n                const allCards: IQuestionCard[] = action.payload.data;\n                state.allCards = allCards;\n                state.status = 200;\n                state.message = \"\";\n                state.error = false;\n            })\n    })\n})\n\nexport const selectGetAllCards = (state: RootState) => state.quiz.allCards;\nexport const selectGetAnsweredCards = (state: RootState) => state.quiz.answeredCards;\n\nexport const selectErrorStatus = (state: RootState) => state.quiz.status;\nexport const selectErrorMessage = (state: RootState) => state.quiz.message;\nexport const selectError = (state: RootState) => state.quiz.error;\nexport const {closeError}= QuizSlice.actions;\nexport const {answerCard}= QuizSlice.actions;\nexport default QuizSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, {useMemo, useState} from 'react'\nimport {FormControl, FormControlLabel, Radio, RadioGroup, useFormControl} from \"@mui/material\";\n\n//component imports\n\n//interface imports\nimport {cardMode} from \"../../Interfaces/IQuestionCard\";\n\ntype Props = {\n    choices: string[],\n    mode: cardMode,\n    selectAnswer: (e: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction Choices({choices, mode, selectAnswer}: Props){\n\n    const choicesNoInteraction = choices.map((choice, i) => <h1 key={i}>{choice}</h1>)\n    const radios = choices.map((choice, i) => <FormControlLabel control={<Radio />} label={choice} value={i} />)\n    const multipleChoice = <RadioGroup aria-label=\"Multiple Choice\" name=\"multiple-choice-answers\"   onChange={selectAnswer}>{radios}</RadioGroup>\n    return(\n        <div>\n            <FormControl component=\"fieldset\">\n        {mode === cardMode.ALL ? choicesNoInteraction : multipleChoice}\n            </FormControl>\n        </div>\n    )\n}\n\nexport default Choices;\n","import React, {useState} from 'react';\n\n\n//component imports\nimport {Avatar, Button, Card, CardActions, CardContent, CardHeader, IconButton} from \"@mui/material\";\nimport HelpIcon from '@mui/icons-material/Help';\nimport Choices from \"../choices/Choices\";\n//interface imports\nimport {cardMode, IQuestionCard} from \"../../Interfaces/IQuestionCard\";\nimport {useAppDispatch} from \"../../app/hooks\";\nimport {answerCard} from \"../../Slicer/QuizSlice\";\n\ntype Props = {\n    card: IQuestionCard,\n    mode: cardMode\n}\n\nfunction Quizcard({card, mode}: Props){\n    const dispatch = useAppDispatch();\n    const [selected, setSelected] = useState<number[]>([]);\n    const onSelectAnswer = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setSelected([+e.target.value])\n    };\n    const {question, choices, answerIndices} = card;\n    const submitAnswer = () => {\n        console.log(checkAnswer() ? \"correct\" : \"wrong\");\n        dispatch(answerCard(card))\n    };\n    return(\n        <Card sx={{ maxWidth: 345 }}>\n            <CardHeader\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <HelpIcon />\n                    </IconButton>\n                }\n                title={question}\n            />\n            <CardContent>\n                <Choices choices={choices} mode={mode} selectAnswer={onSelectAnswer}/>\n            </CardContent>\n            {mode === cardMode.QUIZ && <CardActions>\n                <Button onClick={submitAnswer}>submit answer</Button>\n            </CardActions>}\n        </Card>\n    )\n    function checkAnswer(){\n        return card.answerIndices.length === selected.length &&\n            card.answerIndices.every(index => selected.indexOf(index) !== -1)\n    }\n}\n\nexport default Quizcard;\n","import React from 'react'\nimport {selectGetAllCards, selectGetAnsweredCards} from '../../Slicer/QuizSlice';\nimport {useAppSelector} from \"../../app/hooks\";\n\n//component imports\nimport {Grid} from \"@mui/material\";\nimport Quizcard from \"../card/Card\";\n\n//interface imports\nimport {cardMode, IQuestionCard} from \"../../Interfaces/IQuestionCard\";\n\ntype Props = {};\n\n\nfunction Quiz(props: Props){\n    const allCards = useAppSelector(selectGetAllCards);\n    const answeredCards = useAppSelector(selectGetAnsweredCards);\n    const cardsToAnswer = allCards.filter(card => answeredCards.indexOf(card) === -1);\n    const nextCard: IQuestionCard = cardsToAnswer[Math.floor(Math.random() * cardsToAnswer.length)]\n    return(\n       <Grid container justifyContent=\"center\" alignItems=\"center\">\n           <Grid item>\n               {nextCard &&<Quizcard card={nextCard} mode={cardMode.QUIZ} />}\n           </Grid>\n       </Grid>\n    )\n}\n\nexport default Quiz;\n","import React, {useState} from 'react'\nimport {Button, Card, CardContent, Typography} from \"@mui/material\";\nimport TextField from '@mui/material/TextField';\nimport {createCard} from \"../../services/apiService\";\nimport {getApiData} from \"../../Slicer/QuizSlice\";\nimport {useAppDispatch} from \"../../app/hooks\";\n\n//component imports\n\n//interface imports\n\ntype Props = {};\n\nfunction CardCreationDialog(props: Props) {\n    const dispatch = useAppDispatch();\n    const [question, setQuestion] = useState<string>(\"\");\n    const [choices, setChoices] = useState<string[]>([]);\n    const [choiceText, setChoiceText] = useState<string>(\"\");\n    const [answerIndex, setAnswerIndex] = useState<number>(0);\n    const [answerIndices, setAnswerIndices] = useState<number[]>([]);\n    const handleChange = ({target}: React.ChangeEvent<HTMLInputElement>) => {\n        target.name === \"question\" ? setQuestion(target.value) :\n            target.name === \"choiceText\" ? setChoiceText(target.value) :\n                setAnswerIndex(+target.value);\n    }\n\n    const saveCoice = () => {\n        setChoices([...choices, choiceText]);\n        setChoiceText(\"\");\n    }\n    const saveIndex = () => {\n        if(answerIndices.indexOf(answerIndex) >= 0) return;\n        setAnswerIndices([...answerIndices, answerIndex]);\n        setAnswerIndex(0);\n    }\n    const saveCard = () => {\n        createCard({question, choices, answerIndices})\n            .then(() => dispatch(getApiData()));\n    }\n    return (\n        <Card>\n            <CardContent>\n                <Typography><TextField value={question} name=\"question\" label=\"question\" onChange={handleChange}></TextField></Typography>\n                <Typography><TextField value={choiceText} name=\"choiceText\" label=\"choiceText\" onChange={handleChange}></TextField></Typography>\n                <Button onClick={saveCoice}>add answer</Button>\n                {/*<TextField*/}\n                {/*    value={answerIndex}*/}\n                {/*    label=\"answerIndex\"*/}\n                {/*    type=\"number\"*/}\n                {/*    InputLabelProps={{*/}\n                {/*        shrink: true,*/}\n                {/*    }}*/}\n                {/*    inputProps={{min:0, max:choices.length -1}}*/}\n                {/*    onChange={handleChange}*/}\n                {/*/>*/}\n                <Button onClick={saveIndex}>save index of correct answer</Button>\n                <Button onClick={saveCard}>save card</Button>\n\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default CardCreationDialog;\n","import React from 'react'\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectGetAllCards} from \"../../Slicer/QuizSlice\";\nimport Quizcard from \"../card/Card\";\n\n//component imports\n\n//interface imports\nimport {cardMode} from \"../../Interfaces/IQuestionCard\";\n\ntype Props = {};\n\nfunction AllCards(props: Props){\n    const allCards = useAppSelector(selectGetAllCards);\n    const cards = allCards.map(card => <Quizcard card={card} mode={cardMode.ALL} />)\n    return(\n       <div>{cards}</div>\n    )\n}\n\nexport default AllCards;\n","import React from 'react';\nimport './App.css';\n\n\n//components\nimport StartView from \"./Components/start-view/StartView\";\nimport Quiz from \"./Components/quiz/Quiz\";\nimport {Route} from \"react-router\";\nimport CardCreationDialog from './Components/card-creation-dialog/CardCreationDialog';\nimport AllCards from './Components/all-cards/AllCards';\nimport {useAppDispatch} from \"./app/hooks\";\nimport {getApiData} from \"./Slicer/QuizSlice\";\n\n\nfunction App() {\n    const dispatch = useAppDispatch();\n    dispatch(getApiData());\n\n    return (\n        <div>\n            <StartView></StartView>\n            <Route path=\"/quiz\" component={Quiz} />\n            <Route path=\"/new\" component={CardCreationDialog} />\n            <Route path=\"/all\" component={AllCards} />\n            {/*<Quiz></Quiz>*/}\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport quizReducer from '../Slicer/QuizSlice';\n\nexport const store = configureStore({\n  reducer: {\n    quiz: quizReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}