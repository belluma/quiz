{"version":3,"sources":["Interfaces/IQuestionCard.ts","app/hooks.ts","services/apiService.ts","Slicer/QuizSlice.tsx","Components/quizcard/choices/Choices.tsx","Components/quizcard/quizcard-header/QuizcardHeader.tsx","Components/quizcard/card-footer/CardFooter.tsx","Components/quizcard/Quizcard.tsx","Components/all-cards/AllCards.tsx","Components/quiz/Quiz.tsx","Slicer/NewCardSlice.tsx","Components/quizcard/card-creation-dialog/custom-form-group/CustomFormGroup.tsx","Components/quizcard/card-creation-dialog/CardCreationDialog.tsx","Components/app-header/AppHeader.tsx","App.tsx","app/store.ts","serviceWorker.ts","theme.ts","index.tsx"],"names":["cardMode","createCardStatus","useAppDispatch","useDispatch","useAppSelector","useSelector","BASE_URL","getApiData","createAsyncThunk","a","axios","get","then","result","catch","err","data","status","statusText","QuizSlice","createSlice","name","initialState","allCards","answeredCards","message","error","reducers","closeError","state","moveCardToAnseweredCardsStack","action","payload","extraReducers","builder","addCase","pending","fulfilled","handleErrors","selectGetAllCards","quiz","selectGetAnsweredCards","actions","Choices","choices","mode","selectAnswer","selected","choicesWithoutInput","map","choice","i","Grid","item","xs","sm","Typography","radios","ThemeProvider","theme","createTheme","palette","primary","main","FormControlLabel","control","Radio","label","value","checked","multipleChoiceInGrid","RadioGroup","onChange","createGrid","FormControl","sx","width","component","QUIZ","childComponent","container","spacing","columns","justifyContent","QuizcardHeader","title","clickHandler","CardHeader","onClick","bgcolor","avatar","titleTypographyProps","fontSize","CardFooter","disableButton","onButtonClick","buttonText","CardActions","position","bottom","left","Button","disabled","variant","styleCardContent","dialogStatus","styles","color","qStyles","Quizcard","card","dispatch","useState","setSelected","id","question","Card","height","borderRadius","Divider","CardContent","e","target","method","url","headers","response","validateAnswer","answerIndices","console","log","AllCards","props","cards","ALL","Quiz","cardsToAnswer","filter","indexOf","nextCard","Math","floor","random","length","newCardSlice","changeQuestionText","CustomFormGroup","text","handleTextChange","handleButtonClick","textFieldName","textFieldLabel","FormGroup","TextField","CardCreationDialog","setQuestion","setChoices","choiceText","setChoiceText","setAnswerIndices","QUESTION","setDialogStatus","handleChange","ANSWER","SELECT","AppHeader","history","useHistory","admin","setAdmin","window","innerWidth","scrollTrigger","setScrollTrigger","handleResize","useEffect","addEventListener","Fragment","CssBaseline","HideOnScroll","AppBar","Toolbar","IconButton","edge","mb","alignItems","ButtonGroup","push","size","endIcon","Container","pt","maxWidth","path","children","trigger","useScrollTrigger","Slide","appear","direction","in","App","store","configureStore","reducer","quizReducer","newCard","newCardReducer","Boolean","location","hostname","match","secondary","background","default","paper","success","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a198734.chunk.js","sourcesContent":["export interface IQuestionCard {\n    id:number,\n    question: string,\n    choices: string[],\n    answerIndices: number[],\n}\n\nexport enum cardMode {\n    RESULT = \"RESULT\",\n    QUIZ = \"QUIZ\",\n    ALL = \"ALL\",\n    NEW = 'NEW',\n}\n\nexport interface IError {\n    status: number,\n    message: string,\n    error: boolean,\n}\n\nexport interface IQuizState extends IError {\n    allCards:IQuestionCard[],\n    answeredCards: IQuestionCard[],\n}\n\nexport enum createCardStatus {\n    QUESTION = \"QUESTION\",\n    ANSWER = \"ANSWER\",\n    SELECT = \"SELECT\"\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios, {AxiosResponse} from \"axios\";\n\nconst BASE_URL = \"/api/quiz\"\n\nexport const getAllCards = ():Promise<AxiosResponse> => {\n    return axios.get(BASE_URL)\n        .then(result => result)\n        .catch(err => err)\n}\n\nexport const createCard = (card:any):Promise<AxiosResponse> =>{\n    return axios({\n        method:'post',\n        url:`${BASE_URL}/new`,\n        data: card,\n        headers:{\"Content-Type\": \"application/json\"}\n    }).then(response => response)\n        .catch(err => err)\n}\nexport const validateAnswer = (card:any):Promise<AxiosResponse> =>{\n    return axios({\n        method:'post',\n        url:`${BASE_URL}`,\n        data: card,\n        headers:{\"Content-Type\": \"application/json\"}\n    }).then(response => response)\n        .catch(err => err)\n}\n","import {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {getAllCards} from \"../services/apiService\";\nimport { IQuestionCard, IQuizState} from \"../Interfaces/IQuestionCard\";\nimport {RootState} from \"../app/store\";\n\nconst initialState: IQuizState = {\n    allCards: [],\n    answeredCards:[],\n    status: 200,\n    message: \"\",\n    error: false,\n    }\n\ninterface IResponseData {\n    data:IQuestionCard[],\n    status:number,\n    statusText:string\n}\n\nexport const getApiData = createAsyncThunk(\n    'todoList/fetchTodos'\n    , async () => {\n        const {data, status, statusText} = await (getAllCards());\n        return {data, status, statusText}\n    }\n)\n\n\nconst handleErrors = (state:IQuizState, action: PayloadAction<IResponseData>): boolean => {\n    if(action.payload.status !== 200){\n        state.status = action.payload.status;\n        state.message = action.payload.statusText;\n        state.error = true;\n        if(action.payload.status === 204) state.allCards = state.answeredCards = [];\n        return true\n    }\n    return false\n}\nexport const QuizSlice = createSlice({\n    name: 'todoList',\n    initialState,\n    reducers: {\n        closeError: (state) =>{\n            state.error = false;\n            state.status = 200;\n            state.message = \"\";\n        },\n        moveCardToAnseweredCardsStack: (state, action:PayloadAction<IQuestionCard>) => {\n            state.answeredCards = [...state.answeredCards, action.payload];\n        },\n    },\n    extraReducers: (builder => {\n        builder\n            .addCase(getApiData.pending, state => {\n            })\n            .addCase(getApiData.fulfilled, (state, action: PayloadAction<IResponseData>) => {\n                if (handleErrors(state, action)) return\n                const allCards: IQuestionCard[] = action.payload.data;\n                state.allCards = allCards;\n                state.status = 200;\n                state.message = \"\";\n                state.error = false;\n            })\n    })\n})\n\nexport const selectGetAllCards = (state: RootState) => state.quiz.allCards;\nexport const selectGetAnsweredCards = (state: RootState) => state.quiz.answeredCards;\n\nexport const selectErrorStatus = (state: RootState) => state.quiz.status;\nexport const selectErrorMessage = (state: RootState) => state.quiz.message;\nexport const selectError = (state: RootState) => state.quiz.error;\nexport const {closeError, moveCardToAnseweredCardsStack}= QuizSlice.actions;\nexport default QuizSlice.reducer;\n","import React from 'react'\n\n//component imports\nimport {\n    createTheme,\n    FormControl,\n    FormControlLabel,\n    Grid,\n    Radio,\n    RadioGroup,\n    ThemeOptions, ThemeProvider,\n    Typography\n} from \"@mui/material\";\n\n//interface imports\nimport {cardMode} from \"../../../Interfaces/IQuestionCard\";\n\ntype Props = {\n    choices: string[],\n    mode: cardMode,\n    selectAnswer: (e: React.ChangeEvent<HTMLInputElement>) => void,\n    selected:number[]\n};\n\nfunction Choices({choices, mode, selectAnswer, selected}: Props) {\n\n    const choicesWithoutInput = choices.map((choice, i) => <Grid item xs={2} sm={1}\n                                                                 key={i}><Typography>{choice}</Typography>\n    </Grid>)\n\n    const radios = choices.map((choice, i) => (\n        <Grid item xs={2} sm={1} key={i}>\n            <ThemeProvider theme={overrideColorOnChecked()}>\n            <FormControlLabel control={<Radio/>} label={choice} value={i} checked={selected[0] === i}/>\n            </ThemeProvider></Grid>));\n\n    const multipleChoiceInGrid =\n        <RadioGroup aria-label=\"Multiple Choice\" name=\"multiple-choice-answers\" onChange={selectAnswer}  >\n        {createGrid(radios)}</RadioGroup>\n\n    return (\n        <FormControl sx={{width: \"100%\"}} component=\"fieldset\">\n            {mode === cardMode.QUIZ ? multipleChoiceInGrid : createGrid(choicesWithoutInput)}\n        </FormControl>\n    )\n\n    function createGrid(childComponent: JSX.Element | JSX.Element[]) {\n        return <Grid item container spacing={2} columns={{xs: 2}} justifyContent=\"space-between\">{childComponent}</Grid>\n    }\n    function overrideColorOnChecked():ThemeOptions{\n        return createTheme({\n            palette:{\n                primary:{\n                    main:\"rgb(0,0,0,0.87)\"\n                }\n            }\n        })\n    }\n\n}\n\nexport default Choices;\n","import React from 'react'\n\n//component imports\nimport {CardHeader} from \"@mui/material\";\nimport HelpIcon from \"@mui/icons-material/Help\";\n\n//interface imports\n\ntype Props = {\n    title: string | undefined,\n    clickHandler?: () => void\n};\n\nfunction QuizcardHeader({title, clickHandler}: Props){\n    return(\n        <CardHeader\n            onClick={clickHandler}\n            component='h1'\n\n            sx={{bgcolor: 'background.paper', }}\n            avatar={<HelpIcon/>}\n            title={title ? `${title}?` : title}\n            titleTypographyProps={{fontSize: 26}}\n        />\n    )\n}\n\nexport default QuizcardHeader;\n","import React from 'react'\nimport {Button, CardActions} from \"@mui/material\";\n\n//component imports\n\n//interface imports\n\ntype Props = {\n    disableButton:boolean,\n    onButtonClick:()=>void,\n    buttonText:string,\n};\n\nfunction CardFooter({disableButton, onButtonClick, buttonText}: Props){\n    return(\n        <CardActions sx={{position: \"absolute\", bottom: 1, left:15}}>\n            <Button disabled={disableButton} variant=\"text\"\n                    onClick={onButtonClick}>{buttonText}</Button>\n        </CardActions>\n    )\n}\n\nexport default CardFooter;\n","import React, {useState} from 'react';\nimport {useAppDispatch} from \"../../app/hooks\";\nimport {moveCardToAnseweredCardsStack} from \"../../Slicer/QuizSlice\";\n\n//component imports\nimport {Button, Card, CardActions, CardContent, Divider,} from \"@mui/material\";\nimport Choices from \"./choices/Choices\";\nimport QuizcardHeader from \"./quizcard-header/QuizcardHeader\";\n\n//interface imports\nimport {cardMode,  IQuestionCard} from \"../../Interfaces/IQuestionCard\";\nimport {validateAnswer} from '../../services/apiService';\nimport CardFooter from \"./card-footer/CardFooter\";\n\n\ntype Props = {\n    card: IQuestionCard,\n    mode: cardMode\n}\n\nfunction Quizcard({card, mode}: Props) {\n    const dispatch = useAppDispatch();\n    const [selected, setSelected] = useState<number[]>([]);\n    const onSelectAnswer = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setSelected([+e.target.value])\n    };\n    const {id, question, choices} = card;\n    const submitAnswer = () => {\n        const answer: IQuestionCard = {id, question, choices, answerIndices: selected}\n        validateAnswer(answer)\n            .then(response => {\n                console.log(response)\n            })\n        setSelected([]);\n        dispatch(moveCardToAnseweredCardsStack(card));\n    };\n    return (\n        <Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <QuizcardHeader title={question}/>\n            <Divider />\n            <CardContent sx={styleCardContent()}>\n                <Choices choices={choices} mode={mode} selectAnswer={onSelectAnswer} selected={selected}/>\n            </CardContent>\n            {mode === cardMode.QUIZ &&\n\n            <CardFooter disableButton={false} onButtonClick={submitAnswer} buttonText=\"submit answer\" />}\n\n        </Card>\n    )\n}\n\nexport function makeCardChangeBetweenPortraitAndLandscape() {\n    return {\n        height: {\n            xs: 500,\n            sm: 345\n        }, width: {\n            xs: 345, sm: 500\n        }, borderRadius: 10, position: \"relative\"\n    } as const;\n}\n\nexport function styleCardContent(dialogStatus = \"\") {\n    const styles = {position: \"absolute\", bottom: 50, width: \"100%\", bgcolor:'primary.main', color:'primary.contrastText'} as const;\n    const {bottom, position,  ...qStyles} = {...styles} as const;\n    return dialogStatus === \"QUESTION\" ? qStyles : styles;\n}\n\nexport default Quizcard;\n","import React from 'react'\nimport {useAppSelector} from \"../../app/hooks\";\nimport {selectGetAllCards} from \"../../Slicer/QuizSlice\";\n\n//component imports\nimport Quizcard from \"../quizcard/Quizcard\";\n\n//interface imports\nimport {cardMode} from \"../../Interfaces/IQuestionCard\";\nimport {Grid} from \"@mui/material\";\n\ntype Props = {};\n\nfunction AllCards(props: Props){\n    const allCards = useAppSelector(selectGetAllCards);\n    const cards = allCards.map(card => <Grid item key={card.id}><Quizcard card={card} mode={cardMode.ALL}/></Grid>)\n    return(\n       <Grid container spacing={2} justifyContent=\"space-between\">\n           {cards}\n       </Grid>\n\n    )\n}\n\nexport default AllCards;\n","import React from 'react'\nimport {selectGetAllCards, selectGetAnsweredCards} from '../../Slicer/QuizSlice';\nimport {useAppSelector} from \"../../app/hooks\";\n\n//component imports\nimport {Grid} from \"@mui/material\";\nimport Quizcard from \"../quizcard/Quizcard\";\n\n//interface imports\nimport {cardMode, IQuestionCard} from \"../../Interfaces/IQuestionCard\";\n\ntype Props = {};\n\n\nfunction Quiz(props: Props){\n    const allCards = useAppSelector(selectGetAllCards);\n    const answeredCards = useAppSelector(selectGetAnsweredCards);\n    const cardsToAnswer = allCards.filter(card => answeredCards.indexOf(card) === -1);\n    const nextCard: IQuestionCard = cardsToAnswer[Math.floor(Math.random() * cardsToAnswer.length)]\n    return(\n           <Grid item>\n               {nextCard &&<Quizcard card={nextCard} mode={cardMode.QUIZ} />}\n           </Grid>\n    )\n}\n\nexport default Quiz;\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {RootState} from \"../app/store\";\n\nconst initialState = {\n    question: \"\"\n}\n\nexport const newCardSlice = createSlice({\n    name: \"newCard\",\n    initialState,\n    reducers:{\n        changeQuestionText:(state, action:PayloadAction<string>) => {\n            state.question = action.payload;\n        }\n    }\n})\n\nexport const selectQuestionText = (state: RootState) => state.newCard.question;\nexport const {changeQuestionText} = newCardSlice.actions;\nexport default newCardSlice.reducer;\n","import React, {ChangeEvent} from 'react'\n\n//component imports\nimport {Button, createTheme, FormGroup, ThemeOptions, ThemeProvider} from \"@mui/material\";\nimport TextField from \"@mui/material/TextField\";\n\n//interface imports\n\ntype Props = {\n    text: string | undefined,\n    handleTextChange: (e: ChangeEvent<HTMLInputElement>) => void,\n    disableButton: boolean,\n    handleButtonClick: () => void,\n    textFieldName:string,\n    textFieldLabel:string\n}\n;\n\nfunction CustomFormGroup({text, handleTextChange, disableButton, handleButtonClick, textFieldName, textFieldLabel}: Props){\n    return(\n        <FormGroup>\n            <ThemeProvider theme={overrideFontColorOnFocus()}>\n                <TextField value={text} name={textFieldName} label={textFieldLabel}\n                           onChange={handleTextChange} variant=\"filled\" />\n            </ThemeProvider>\n            <Button disabled={disableButton} onClick={handleButtonClick} variant=\"contained\">Ok</Button>\n        </FormGroup>\n    )\nfunction overrideFontColorOnFocus():ThemeOptions{\n    return createTheme({\n        palette:{\n            primary:{\n                main:\"#000\"\n            }\n        }\n    })\n}\n}\n\nexport default CustomFormGroup;\n","import React, {useState} from 'react'\nimport {getApiData} from \"../../../Slicer/QuizSlice\";\nimport {useAppDispatch} from \"../../../app/hooks\";\nimport {changeQuestionText} from \"../../../Slicer/NewCardSlice\";\n\n//component imports\nimport Choices from \"../choices/Choices\";\nimport {createCard} from \"../../../services/apiService\";\nimport TextField from '@mui/material/TextField';\nimport {\n    Button,\n    Card,\n    CardActions,\n    CardContent,\n    createMuiTheme,\n    createTheme,\n    Divider,\n    FormGroup, ThemeOptions,\n    ThemeProvider,\n} from \"@mui/material\";\nimport QuizcardHeader from \"../quizcard-header/QuizcardHeader\";\n\n\n//interface imports\nimport {cardMode, createCardStatus} from \"../../../Interfaces/IQuestionCard\";\n\n//styles\nimport {makeCardChangeBetweenPortraitAndLandscape, styleCardContent} from \"../Quizcard\";\nimport CustomFormGroup from \"./custom-form-group/CustomFormGroup\";\nimport CardFooter from \"../card-footer/CardFooter\";\n\ntype Props = {};\n\nfunction CardCreationDialog(props: Props) {\n    const dispatch = useAppDispatch();\n    const [question, setQuestion] = useState<string>(\"\");\n    const [choices, setChoices] = useState<string[]>([]);\n    const [choiceText, setChoiceText] = useState<string>(\"\");\n    const [answerIndices, setAnswerIndices] = useState<number[]>([]);\n    const [dialogStatus, setDialogStatus] = useState<createCardStatus>(createCardStatus.QUESTION);\n    const handleChange = ({target}: React.ChangeEvent<HTMLInputElement>) => {\n        target.name === \"question\" && setQuestion(target.value);\n        target.name === \"choiceText\" && setChoiceText(target.value)\n    }\n    const advanceStatus = () => {\n        setDialogStatus(dialogStatus === createCardStatus.QUESTION ? createCardStatus.ANSWER : createCardStatus.SELECT);\n    }\n    // const revertStatus = () => {\n    //     setDialogStatus(dialogStatus === createCardStatus.SELECT ? createCardStatus.ANSWER : createCardStatus.QUESTION);\n    // }\n    const saveChoice = () => {\n        setChoices([...choices, choiceText]);\n        setChoiceText(\"\");\n    }\n    const saveCard = () => {\n        createCard({question: question, choices, answerIndices})\n            .then(() => {\n                dispatch(getApiData());\n                resetStates();\n            });\n    }\n    return (<Card sx={makeCardChangeBetweenPortraitAndLandscape()}>\n            <QuizcardHeader title={question} clickHandler={() => setDialogStatus(createCardStatus.QUESTION)}/>\n            <Divider/>\n            <CardContent sx={styleCardContent(dialogStatus)}>\n                {dialogStatus === createCardStatus.QUESTION &&\n                <CustomFormGroup text={question} handleTextChange={handleChange} disableButton={!question.length}\n                                 handleButtonClick={advanceStatus} textFieldName=\"question\"\n                                 textFieldLabel=\"write your question here\"/>}\n                {dialogStatus === createCardStatus.ANSWER && choices.length < 4 &&\n                <CustomFormGroup text={choiceText} handleTextChange={handleChange} disableButton={!choiceText.length}\n                                 handleButtonClick={saveChoice} textFieldName=\"choiceText\"\n                                 textFieldLabel=\"write possible answer here\"/>\n                }\n                <Choices choices={choices} mode={cardMode.QUIZ}\n                         selectAnswer={(e) => setAnswerIndices([+e.target.value])} selected={answerIndices}/>\n\n            </CardContent>\n            <CardFooter disableButton={choices.length < 2 || !answerIndices.length || !question} onButtonClick={saveCard} buttonText=\"save card\" />\n\n        </Card>\n    )\n\n    function overrideFontColorOnFocus(): ThemeOptions {\n        return createTheme({\n            palette: {\n                primary: {\n                    main: \"#000\"\n                }\n            }\n        })\n    }\n\n\n    function resetStates() {\n        dispatch(changeQuestionText(\"\"))\n        setQuestion(\"\");\n        setChoices([]);\n        setChoiceText(\"\");\n        setAnswerIndices([]);\n        setDialogStatus(createCardStatus.QUESTION);\n    }\n}\n\nexport default CardCreationDialog;\n","import React, {useEffect, useState} from 'react'\nimport AllCards from \"../all-cards/AllCards\";\nimport {Route, useHistory} from \"react-router\";\nimport 'bulma/css/bulma.css';\n\n\n//component imports\nimport {\n    AppBar, ButtonGroup,\n    Container,\n    CssBaseline,\n    Grid,\n    IconButton,\n    Slide,\n    Toolbar,\n    Typography,\n    useScrollTrigger\n} from \"@mui/material\";\nimport Button from '@mui/material/Button';\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport Quiz from \"../quiz/Quiz\";\nimport CardCreationDialog from \"../quizcard/card-creation-dialog/CardCreationDialog\";\n\n//interface imports\n\ntype Props = {\n    children?: React.ReactElement;\n};\n\n\nfunction AppHeader(props: Props) {\n    const history = useHistory();\n    const [admin, setAdmin] = useState(false);\n    const [scrollTrigger, setScrollTrigger] = useState<boolean>(window.innerWidth < 900);\n    const handleResize = () => {\n        if (window.innerWidth < 900 && !scrollTrigger) setScrollTrigger(true)\n        if (window.innerWidth >= 900 && scrollTrigger) setScrollTrigger(false)\n    }\n    useEffect(() => {\n        window.addEventListener(\"resize\", handleResize, false);\n    }, [])\n\n\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n            <HideOnScroll {...props}>\n                <AppBar sx={{bgcolor:'primary.light'}}>\n                    <Toolbar sx={{justifyContent:\"space-between\"}}>\n                        <Typography>Codificantes</Typography>\n                        <IconButton onClick={() => setAdmin(!admin)} edge=\"end\"\n                                    >\n                            <EditIcon/>\n                        </IconButton>\n                    </Toolbar>\n                    <Toolbar sx={{mb:1, alignItems: \"stretch\", justifyContent: \"space-between\"}}>\n                        {!admin ?\n                            <ButtonGroup  >\n                                <Button endIcon={<PlayArrowIcon/>}\n                                        onClick={() => history.push('/quiz')} variant=\"contained\" size=\"large\"\n                                      sx={{bgcolor:\"primary.light\"}}  >Start\n                                    Quiz</Button>\n                            </ButtonGroup> :\n                            <ButtonGroup>\n                                <Button onClick={() => history.push('/new')} variant=\"contained\" size=\"medium\"\n                                        sx={{bgcolor:\"primary.light\"}}>Create\n                                    New Card</Button>\n                                <Button onClick={() => history.push('/all')} variant=\"contained\" size=\"medium\"\n                                        sx={{bgcolor:\"primary.light\"}}>Show\n                                    All Cards</Button>\n                            </ButtonGroup>}\n                    </Toolbar>\n                </AppBar>\n            </HideOnScroll>\n            <Toolbar/>\n            <Container sx={{pt: 15}} maxWidth={false}>\n                <Grid container justifyContent=\"center\" alignItems=\"center\">\n                    <Route path=\"/quiz\" component={Quiz}/>\n                    <Route path=\"/new\" component={CardCreationDialog}/>\n                    <Route path=\"/all\" component={AllCards}/>\n                </Grid>\n            </Container>\n        </React.Fragment>\n    )\n\n    function HideOnScroll(props: Props) {\n        const {children} = props;\n        const trigger = useScrollTrigger({});\n        return (\n            <Slide appear={false} direction=\"down\" in={!scrollTrigger ? true : !trigger}>\n                {children}\n            </Slide>\n        );\n    }\n\n\n}\n\nexport default AppHeader;\n","import React from 'react';\nimport './App.css';\n\n\n//components\nimport AppHeader from \"./Components/app-header/AppHeader\";\nimport {useAppDispatch} from \"./app/hooks\";\nimport {getApiData} from \"./Slicer/QuizSlice\";\n\nfunction App() {\n    const dispatch = useAppDispatch();\n    dispatch(getApiData());\n    return (\n        <div>\n            <AppHeader></AppHeader>\n\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport quizReducer from '../Slicer/QuizSlice';\nimport newCardReducer from '../Slicer/NewCardSlice'\n\nexport const store = configureStore({\n  reducer: {\n    quiz: quizReducer,\n    newCard: newCardReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createTheme, ThemeOptions} from \"@mui/material\";\n\n const theme:ThemeOptions = createTheme({\n     palette: {\n         primary: {\n             main: '#ffb300',\n\n         },\n         secondary: {\n             main: '#5c6bc0',\n         },\n         background: {\n             default: '#fff9c4',\n             paper: '#f3e5f5',\n         },\n         success: {\n             main: '#16e21d',\n         },\n     },\n});\nexport default theme\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport { ThemeProvider} from \"@mui/material\";\nimport theme from './theme'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <ThemeProvider theme={theme}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n          </ThemeProvider>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}